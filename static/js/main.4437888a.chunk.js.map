{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","abouttext","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4437888a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link }from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.abouttext}</a>\r\n              </li>\r\n            </ul>\r\n              <div className={`form-check form-switch text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n       </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    abouttext: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title: 'set title here',\r\n    abouttext : 'about text here'\r\n};\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to upper case\",\"success\");\r\n    }\r\n    const handleloClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lower case\",\"success\");\r\n    }\r\n    const clearClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"your text is clear \",\"danger\");\r\n    }\r\n   \r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0,9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"your text is copy  \",\"success\");\r\n    }\r\n    \r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(' ');\r\n    return (\r\n        <>\r\n        <div className =\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n        <h1 >{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode ==='dark'?'#acb3b894':'white',color: props.mode === 'dark'?'white':'black' }} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick} >Convert to Uppercase </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleloClick} >Convert to Lowercase </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={clearClick} >Clear Text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopy} >Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h2> your text summary</h2>\r\n            <p>{text.split(\" \").length} words {text.length}character </p>\r\n            <p>{0.008*text.split(\" \").length} Minutes to read </p>\r\n            <h2>preview</h2>\r\n            <p>{text.length>0?text:\"Enter Somthing to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './component/About';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport React, { useState } from 'react';\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //wheather dark mode is enable or not \n  const [alert,setAlert] = useState(null);\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },3000)\n  }\n      const toggleMode = ()=>{\n        if(mode==='light'){\n        setMode('dark');\n        document.body.style.backgroundColor ='#1a0994';\n        showAlert(\"Dark mode has been enabled\",\"success\");\n        document.title=\"TextUtile - Dark Mode\";\n        // setInterval(() => {\n        //   document.title=\"TextUtile- is amazing download Know\";\n        // }, 1500);\n        // setInterval(() => {\n        //   document.title=\" download Know\";\n        // }, 3000);\n      }\n        else{\n        setMode('light');\n        document.body.style.backgroundColor ='white';\n        showAlert(\"light mode has been enabled\",\"success\");\n        document.title=\"TextUtile - Light Mode\";\n        }\n      }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"Utile Title\" abouttext=\"About Us\" mode={mode}  toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n        <div className=\"container my-3 \">\n              {/* <Switch> */}\n                {/* <Route exact path=\"/about\"> */}\n                  {/* <About/>\n                </Route>\n                <Route exact path=\"/\"> */}\n                <TextForm showAlert={showAlert} heading=\"Enter the text\"  mode={mode}/>\n                {/* </Route> */}\n              {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}